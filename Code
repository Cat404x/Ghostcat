"Ghost Cat" tool.

```python
import socket
import sys
import time
import logging
from scapy.all import ARP, Ether, srp

def scan_network(ip_range):
    print(f"Scanning network {ip_range}...")
    arp = ARP(pdst=ip_range)
    ether = Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = ether/arp
    result = srp(packet, timeout=3, verbose=0)[0]
    clients = []
    for sent, received in result:
        clients.append({'ip': received.psrc, 'mac': received.hwsrc})
    return clients

def monitor_connections(port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind(('', port))
    sock.listen(1)
    print(f"Monitoring connections on port {port}...")
    while True:
        conn, addr = sock.accept()
        print(f"Alert: Connection attempt from {addr}")
        conn.close()

def main():
    logging.basicConfig(filename='ghost_cat.log', level=logging.INFO)
    logging.info("Ghost Cat cybersecurity tool started")

    while True:
        print("\nGhost Cat Cybersecurity Tool")
        print("1. Scan network")
        print("2. Monitor connections")
        print("3. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            ip_range = input("Enter IP range to scan (e.g., 192.168.1.0/24): ")
            clients = scan_network(ip_range)
            for client in clients:
                print(f"IP: {client['ip']}\tMAC: {client['mac']}")
                logging.info(f"Detected device - IP: {client['ip']}, MAC: {client['mac']}")

        elif choice == '2':
            port = int(input("Enter port to monitor: "))
            try:
                monitor_connections(port)
            except KeyboardInterrupt:
                print("\nStopped monitoring.")

        elif choice == '3':
            print("Exiting Ghost Cat. Goodbye!")
            logging.info("Ghost Cat cybersecurity tool stopped")
            sys.exit()

        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
```

This script does the following:

1. Network scanning: Uses ARP requests to discover devices on the network.
2. Connection monitoring: Sets up a simple server to detect incoming connection attempts.
3. Logging: Records activities and findings to a log file.

To run this script, you'll need to install the Scapy library:

```
pip install scapy
```

Please note that this is a very basic implementation and should only be used for educational purposes. Real cybersecurity tools are much more complex and require careful consideration of legal and ethical implications. Always ensure you have proper authorization before scanning networks or monitoring
